.cpu arm7tdmi

.section .text.rom
.arm


.global _start
_start:
    b init


header:
    @ Nintendo logo; 156 bytes
    .byte 0x24,0xFF,0xAE,0x51,0x69,0x9A,0xA2,0x21,0x3D,0x84,0x82,0x0A,0x84,0xE4,0x09,0xAD
    .byte 0x11,0x24,0x8B,0x98,0xC0,0x81,0x7F,0x21,0xA3,0x52,0xBE,0x19,0x93,0x09,0xCE,0x20
    .byte 0x10,0x46,0x4A,0x4A,0xF8,0x27,0x31,0xEC,0x58,0xC7,0xE8,0x33,0x82,0xE3,0xCE,0xBF
    .byte 0x85,0xF4,0xDF,0x94,0xCE,0x4B,0x09,0xC1,0x94,0x56,0x8A,0xC0,0x13,0x72,0xA7,0xFC
    .byte 0x9F,0x84,0x4D,0x73,0xA3,0xCA,0x9A,0x61,0x58,0x97,0xA3,0x27,0xFC,0x03,0x98,0x76
    .byte 0x23,0x1D,0xC7,0x61,0x03,0x04,0xAE,0x56,0xBF,0x38,0x84,0x00,0x40,0xA7,0x0E,0xFD
    .byte 0xFF,0x52,0xFE,0x03,0x6F,0x95,0x30,0xF1,0x97,0xFB,0xC0,0x85,0x60,0xD6,0x80,0x25
    .byte 0xA9,0x63,0xBE,0x03,0x01,0x4E,0x38,0xE2,0xF9,0xA2,0x34,0xFF,0xBB,0x3E,0x03,0x44
    .byte 0x78,0x00,0x90,0xCB,0x88,0x11,0x3A,0x94,0x65,0xC0,0x7C,0x63,0x87,0xF0,0x3C,0xAF
    .byte 0xD6,0x25,0xE4,0x8B,0x38,0x0A,0xAC,0x72,0x21,0xD4,0xF8,0x07

    @ Game title; 12 bytes
    .zero 12

    @ AGB-UTTD game code; 4 bytes
    .ascii "AMTE"
    @ .byte 'B'               @ Game type: Normal "newer" game
    @ .byte 0x00,0x00         @ Short title
    @ .byte 'E'               @ Language: English

    .byte 0x30,0x31         @ Maker code; 0x30,0x31 for Nintendo
    .byte 0x96              @ Fixed
    .byte 0x00              @ Unit code
    .byte 0x00              @ Device type; 0 for normal catridges
    .zero 7                 @ Reserved
    .byte 0x00              @ Game version
    .byte 0xC9              @ Header checksum
    .zero 2                 @ Reserved
end_header:

@ Fool mgba MB detection
.word 0xEA000000 @ b 0

.align 2
.asciz "SRAM_Vnnn"

.extern gba_main

.align 2
.set IRQ_MODE, 0x12
.set SYS_MODE, 0x1F
.set IRQ_STACK, 0x03007FA0
.set SYS_STACK, 0x03007300
.func init
init:
    mov r0, $IRQ_MODE
    msr cpsr_fc, r0
    ldr sp, =IRQ_STACK

    mov r0, $SYS_MODE
    msr cpsr_fc, r0
    ldr sp, =SYS_STACK

    bl copy_code_to_wram

    @ Branch to gba_main(), switching to THUMB state
    ldr r0, =gba_main
    orr r0, $1
    mov lr, pc
    bx r0
    b init
.endfunc


.extern _ramtext_vma_begin _ramtext_lma_begin _ramtext_lma_end
.extern _ramrodata_vma_begin _ramrodata_lma_begin _ramrodata_lma_end
.extern _ramdata_vma_begin _ramdata_lma_begin _ramdata_lma_end
.func copy_code_to_wram
copy_code_to_wram:
    push {lr}

    @ Copy ramtext
    ldr r0, =_ramtext_lma_begin
    ldr r1, =_ramtext_vma_begin
    ldr r2, =_ramtext_lma_end
    sub r2, r0
    bl rom_memcpy16

    @ Copy rodata
    ldr r0, =_ramrodata_lma_begin
    ldr r1, =_ramrodata_vma_begin
    ldr r2, =_ramrodata_lma_end
    sub r2, r0
    bl rom_memcpy16

    @ Copy data
    ldr r0, =_ramdata_lma_begin
    ldr r1, =_ramdata_vma_begin
    ldr r2, =_ramdata_lma_end
    sub r2, r0
    bl rom_memcpy16
    
    pop {lr}
    bx lr
.endfunc


.func rom_memcpy16
rom_memcpy16:
    @ r0 = src
    @ r1 = dst
    @ r2 = bytelen
    @ r3 = i
    @ r4 = scratch
    push {r4}
    mov r3, $0
.Lloop_begin:
    cmp r3, r2
    beq .Lloop_end

    ldrh r4, [r0, r3]
    strh r4, [r1, r3]

    add r3, $2

    b .Lloop_begin
.Lloop_end:
    pop {r4}
    bx lr
.endfunc
